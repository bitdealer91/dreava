class t{constructor(){this.cacheName="dreava-upload-cache-v1";this.initialized=!1;this.init()}async init(){try{if("serviceWorker"in navigator){await this.registerServiceWorker();this.initialized=!0}}catch(t){}}async registerServiceWorker(){try{const t=await navigator.serviceWorker.register("/sw.js",{scope:"/"});return t}catch(t){throw t}}async cacheUpload(t,a){if(this.initialized)try{const e=await caches.open(this.cacheName);const i=await this.generateFileHash(t);const c=`upload_${i}`;const n=new Response(JSON.stringify(a),{headers:{"Content-Type":"application/json","Cache-Control":"max-age=86400"}});await e.put(c,n);return c}catch(e){}}async getCachedUpload(t){if(!this.initialized)return null;try{const a=await caches.open(this.cacheName);const e=await this.generateFileHash(t);const i=`upload_${e}`;const c=await a.match(i);if(c){const t=await c.json();return t}return null}catch(a){return null}}async cacheMetadata(t,a){if(this.initialized)try{const e=await caches.open(this.cacheName);const i=`metadata_${t}`;const c=new Response(JSON.stringify(a),{headers:{"Content-Type":"application/json","Cache-Control":"max-age=3600"}});await e.put(i,c);return i}catch(e){}}async getCachedMetadata(t){if(!this.initialized)return null;try{const a=await caches.open(this.cacheName);const e=`metadata_${t}`;const i=await a.match(e);if(i){const t=await i.json();return t}return null}catch(a){return null}}async clearCache(){if(this.initialized)try{const t=await caches.open(this.cacheName);const a=await t.keys();for(const e of a)await t.delete(e)}catch(t){}}async getCacheStats(){if(!this.initialized)return null;try{const t=await caches.open(this.cacheName);const a=await t.keys();let e=0;for(const i of a){const a=await t.match(i);if(a){const t=await a.blob();e+=t.size}}return{entries:a.length,totalSize:e,cacheName:this.cacheName}}catch(t){return null}}async generateFileHash(t){return new Promise(a=>{const e=new FileReader;e.onload=t=>{const e=t.target.result;crypto.subtle.digest("SHA-256",e).then(t=>{const e=Array.from(new Uint8Array(t));const i=e.map(t=>t.toString(16).padStart(2,"0")).join("");a(i)})};e.readAsArrayBuffer(t)})}async cacheNetworkResponse(t,a){if(this.initialized)try{const e=await caches.open(this.cacheName);await e.put(t,a.clone())}catch(e){}}async getCachedNetworkResponse(t){if(!this.initialized)return null;try{const a=await caches.open(this.cacheName);const e=await a.match(t);return e||null}catch(a){return null}}}export{t as ServiceWorkerCache};
//# sourceMappingURL=serviceWorkerCache-B_gri7LS-B_gri7LS.js.map
