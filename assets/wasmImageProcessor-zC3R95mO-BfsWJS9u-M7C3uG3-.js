class y{constructor(){this.wasmModule=null,this.wasmLoaded=!1,this.canvasProcessor=null,this.initCanvasProcessor()}async initCanvasProcessor(){this.canvasProcessor=new f,console.log("‚úÖ Canvas image processor initialized as fallback")}async loadWasm(){try{const a="/wasm/image-processor.wasm";(await fetch(a,{method:"HEAD"})).ok?(this.wasmModule=await WebAssembly.instantiateStreaming(fetch(a)),this.wasmLoaded=!0,console.log("‚úÖ WASM image processor loaded successfully")):console.warn("‚ö†Ô∏è WASM file not found, using Canvas fallback")}catch(a){console.warn("‚ö†Ô∏è WASM loading failed, using Canvas fallback:",a)}}async optimize(a,e=.8){if(this.wasmLoaded&&this.wasmModule)try{return await this.wasmOptimize(a,e)}catch{console.warn("‚ö†Ô∏è WASM optimization failed, falling back to Canvas")}return await this.canvasOptimize(a,e)}async wasmOptimize(a,e){return await this.canvasOptimize(a,e)}async canvasOptimize(a,e){return new Promise(m=>{const i=document.createElement("canvas"),s=i.getContext("2d"),c=new Image;c.onload=()=>{let{width:n,height:t}=c;if(n>1200||t>900){const o=Math.min(1200/n,900/t);n*=o,t*=o}i.width=n,i.height=t,s.imageSmoothingEnabled=!0,s.imageSmoothingQuality="high",s.drawImage(c,0,0,n,t),i.toBlob(o=>{const r=new File([o],a.name,{type:a.type,lastModified:Date.now()});console.log(`üì± Canvas optimization: ${a.size} -> ${r.size} bytes`),m(r)},a.type,e)},c.onerror=()=>{console.warn("‚ö†Ô∏è Image loading failed, returning original file"),m(a)},c.src=URL.createObjectURL(a)})}async resizeImage(a,e,m){return await this.canvasOptimize(a,1,{maxWidth:e,maxHeight:m})}async compressImage(a,e){return await this.canvasOptimize(a,e)}async convertFormat(a,e){return await this.canvasOptimize(a,.9,{format:e})}}class f{constructor(){this.supportedFormats=["image/jpeg","image/png","image/webp"]}async optimize(a,e=.8,m={}){const{maxWidth:i,maxHeight:s,format:c}=m;return new Promise(n=>{const t=document.createElement("canvas"),o=t.getContext("2d"),r=new Image;r.onload=()=>{let{width:l,height:g}=r;if(i&&l>i){const d=i/l;l=i,g*=d}if(s&&g>s){const d=s/g;g=s,l*=d}t.width=l,t.height=g,o.imageSmoothingEnabled=!0,o.imageSmoothingQuality="high",o.drawImage(r,0,0,l,g);const w=c||a.type,u=this.supportedFormats.includes(w)?w:"image/jpeg";t.toBlob(d=>{const h=new File([d],a.name,{type:u,lastModified:Date.now()});console.log(`üì± Canvas optimization: ${a.size} -> ${h.size} bytes (${Math.round((1-h.size/a.size)*100)}% reduction)`),n(h)},u,e)},r.onerror=()=>{console.warn("‚ö†Ô∏è Image loading failed, returning original file"),n(a)},r.src=URL.createObjectURL(a)})}}export{y as WasmImageProcessor};
//# sourceMappingURL=wasmImageProcessor-zC3R95mO-BfsWJS9u-M7C3uG3-.js.map
