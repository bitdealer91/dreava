class l{constructor(){this.cacheName="dreava-upload-cache-v1",this.initialized=!1,this.init()}async init(){try{"serviceWorker"in navigator&&(await this.registerServiceWorker(),this.initialized=!0)}catch{}}async registerServiceWorker(){try{return location.hostname==="localhost"||location.port?null:await navigator.serviceWorker.register("/sw.js",{scope:"/"})}catch(e){return console.warn("ServiceWorker registration skipped/failed:",e),null}}async cacheUpload(e,t){if(this.initialized)try{const a=await caches.open(this.cacheName),r=`upload_${await this.generateFileHash(e)}`,i=new Response(JSON.stringify(t),{headers:{"Content-Type":"application/json","Cache-Control":"max-age=86400"}});return await a.put(r,i),r}catch{}}async getCachedUpload(e){if(!this.initialized)return null;try{const t=await caches.open(this.cacheName),c=`upload_${await this.generateFileHash(e)}`,r=await t.match(c);return r?await r.json():null}catch{return null}}async cacheMetadata(e,t){if(this.initialized)try{const a=await caches.open(this.cacheName),c=`metadata_${e}`,r=new Response(JSON.stringify(t),{headers:{"Content-Type":"application/json","Cache-Control":"max-age=3600"}});return await a.put(c,r),c}catch{}}async getCachedMetadata(e){if(!this.initialized)return null;try{const t=await caches.open(this.cacheName),a=`metadata_${e}`,c=await t.match(a);return c?await c.json():null}catch{return null}}async clearCache(){if(this.initialized)try{const e=await caches.open(this.cacheName),t=await e.keys();for(const a of t)await e.delete(a)}catch{}}async getCacheStats(){if(!this.initialized)return null;try{const e=await caches.open(this.cacheName),t=await e.keys();let a=0;for(const c of t){const r=await e.match(c);if(r){const i=await r.blob();a+=i.size}}return{entries:t.length,totalSize:a,cacheName:this.cacheName}}catch{return null}}async generateFileHash(e){return new Promise(t=>{const a=new FileReader;a.onload=c=>{const r=c.target.result;crypto.subtle.digest("SHA-256",r).then(i=>{const n=Array.from(new Uint8Array(i)).map(s=>s.toString(16).padStart(2,"0")).join("");t(n)})},a.readAsArrayBuffer(e)})}async cacheNetworkResponse(e,t){if(this.initialized)try{await(await caches.open(this.cacheName)).put(e,t.clone())}catch{}}async getCachedNetworkResponse(e){if(!this.initialized)return null;try{const a=await(await caches.open(this.cacheName)).match(e);return a||null}catch{return null}}}export{l as ServiceWorkerCache};
//# sourceMappingURL=serviceWorkerCache-BN3PYH06.js.map
