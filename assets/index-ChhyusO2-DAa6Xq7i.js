const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/index-CP_03z7G-CpjUtW3x.js","assets/hooks.module-CRTr1Ar6-DE1nDpUx.js","assets/index-DnqNwxB0.js","assets/wagmi-BlTxHScW.js","assets/index-0fkAHHov-Cy4VAOzU.js","assets/index-DhpA2FL2-DXMYeMbX.js","assets/index-tcpCDn4g-BrX72C6U.js","assets/index-nE_b9WcW-Bpm9jvBz.js"])))=>i.map(i=>d[i]);
import{_ as v}from"./wagmi-BlTxHScW.js";import{f as I,h as w,Y as C,c as E,_ as y,a as f,b as _,d as g,j as D}from"./index-DnqNwxB0.js";import{Q as S}from"./index-DnqNwxB0.js";const p=(o,l=p,h=l.f||(l.f=["assets/index-CP_03z7G.js","assets/hooks.module-CRTr1Ar6.js","assets/wagmi-Ck0DqXmB.js","assets/vendor-CgHzTxSQ.js","assets/index-0fkAHHov.js","assets/index-DVvIeBtE.js","assets/ethers-CnlGr5sJ.js","assets/index-DhpA2FL2.js","assets/index-tcpCDn4g.js","assets/index-nE_b9WcW.js"]))=>o.map(i=>h[i]);P.type="coinbaseWallet";function P(o={}){return o.version==="3"||o.headlessMode?x(o):U(o)}function U(o){let l,h,i,r;return I(a=>({id:"coinbaseWalletSDK",name:"Coinbase Wallet",rdns:"com.coinbase.wallet",type:P.type,async connect({chainId:n,...e}={}){try{const t=await this.getProvider(),s=(await t.request({method:"eth_requestAccounts",params:"instantOnboarding"in e&&e.instantOnboarding?[{onboarding:"instant"}]:[]})).map(d=>w(d));h||(h=this.onAccountsChanged.bind(this),t.on("accountsChanged",h)),i||(i=this.onChainChanged.bind(this),t.on("chainChanged",i)),r||(r=this.onDisconnect.bind(this),t.on("disconnect",r));let c=await this.getChainId();return n&&c!==n&&(c=(await this.switchChain({chainId:n}).catch(d=>{if(d.code===f.code)throw d;return{id:c}}))?.id??c),{accounts:s,chainId:c}}catch(t){throw/(user closed modal|accounts received is empty|user denied account|request rejected)/i.test(t.message)?new f(t):t}},async disconnect(){const n=await this.getProvider();h&&(n.removeListener("accountsChanged",h),h=void 0),i&&(n.removeListener("chainChanged",i),i=void 0),r&&(n.removeListener("disconnect",r),r=void 0),n.disconnect(),n.close?.()},async getAccounts(){return(await(await this.getProvider()).request({method:"eth_accounts"})).map(n=>w(n))},async getChainId(){const n=await(await this.getProvider()).request({method:"eth_chainId"});return Number(n)},async getProvider(){if(!l){const n=typeof o.preference=="string"?{options:o.preference}:{...o.preference,options:o.preference?.options??"all"},{createCoinbaseWalletSDK:e}=await _(async()=>{const{createCoinbaseWalletSDK:t}=await v(()=>import("./index-CP_03z7G-CpjUtW3x.js"),__vite__mapDeps([0,1,2,3]));return{createCoinbaseWalletSDK:t}},p([0,1,2,3]));l=e({...o,appChainIds:a.chains.map(t=>t.id),preference:n}).getProvider()}return l},async isAuthorized(){try{return!!(await this.getAccounts()).length}catch{return!1}},async switchChain({addEthereumChainParameter:n,chainId:e}){const t=a.chains.find(c=>c.id===e);if(!t)throw new C(new E);const s=await this.getProvider();try{return await s.request({method:"wallet_switchEthereumChain",params:[{chainId:y(t.id)}]}),t}catch(c){if(c.code===4902)try{let d;n?.blockExplorerUrls?d=n.blockExplorerUrls:d=t.blockExplorers?.default.url?[t.blockExplorers?.default.url]:[];let u;n?.rpcUrls?.length?u=n.rpcUrls:u=[t.rpcUrls.default?.http[0]??""];const m={blockExplorerUrls:d,chainId:y(e),chainName:n?.chainName??t.name,iconUrls:n?.iconUrls,nativeCurrency:n?.nativeCurrency??t.nativeCurrency,rpcUrls:u};return await s.request({method:"wallet_addEthereumChain",params:[m]}),t}catch(d){throw new f(d)}throw new C(c)}},onAccountsChanged(n){n.length===0?this.onDisconnect():a.emitter.emit("change",{accounts:n.map(e=>w(e))})},onChainChanged(n){const e=Number(n);a.emitter.emit("change",{chainId:e})},async onDisconnect(n){a.emitter.emit("disconnect");const e=await this.getProvider();h&&(e.removeListener("accountsChanged",h),h=void 0),i&&(e.removeListener("chainChanged",i),i=void 0),r&&(e.removeListener("disconnect",r),r=void 0)}}))}function x(o){let l,h,i,r,a;return I(n=>({id:"coinbaseWalletSDK",name:"Coinbase Wallet",rdns:"com.coinbase.wallet",type:P.type,async connect({chainId:e}={}){try{const t=await this.getProvider(),s=(await t.request({method:"eth_requestAccounts"})).map(d=>w(d));i||(i=this.onAccountsChanged.bind(this),t.on("accountsChanged",i)),r||(r=this.onChainChanged.bind(this),t.on("chainChanged",r)),a||(a=this.onDisconnect.bind(this),t.on("disconnect",a));let c=await this.getChainId();return e&&c!==e&&(c=(await this.switchChain({chainId:e}).catch(d=>{if(d.code===f.code)throw d;return{id:c}}))?.id??c),{accounts:s,chainId:c}}catch(t){throw/(user closed modal|accounts received is empty|user denied account)/i.test(t.message)?new f(t):t}},async disconnect(){const e=await this.getProvider();i&&(e.removeListener("accountsChanged",i),i=void 0),r&&(e.removeListener("chainChanged",r),r=void 0),a&&(e.removeListener("disconnect",a),a=void 0),e.disconnect(),e.close()},async getAccounts(){return(await(await this.getProvider()).request({method:"eth_accounts"})).map(e=>w(e))},async getChainId(){const e=await(await this.getProvider()).request({method:"eth_chainId"});return Number(e)},async getProvider(){if(!h){const e=await(async()=>{const{default:u}=await _(async()=>{const{default:m}=await v(()=>import("./index-0fkAHHov-Cy4VAOzU.js"),__vite__mapDeps([4,2,3,1])).then(b=>b.i);return{default:m}},p([4,3,5,2,6,1]));return typeof u!="function"&&typeof u.default=="function"?u.default:u})();l=new e({...o,reloadOnDisconnect:!1});const t=l.walletExtension?.getChainId(),s=n.chains.find(u=>o.chainId?u.id===o.chainId:u.id===t)||n.chains[0],c=o.chainId||s?.id,d=o.jsonRpcUrl||s?.rpcUrls.default.http[0];h=l.makeWeb3Provider(d,c)}return h},async isAuthorized(){try{return!!(await this.getAccounts()).length}catch{return!1}},async switchChain({addEthereumChainParameter:e,chainId:t}){const s=n.chains.find(d=>d.id===t);if(!s)throw new C(new E);const c=await this.getProvider();try{return await c.request({method:"wallet_switchEthereumChain",params:[{chainId:y(s.id)}]}),s}catch(d){if(d.code===4902)try{let u;e?.blockExplorerUrls?u=e.blockExplorerUrls:u=s.blockExplorers?.default.url?[s.blockExplorers?.default.url]:[];let m;e?.rpcUrls?.length?m=e.rpcUrls:m=[s.rpcUrls.default?.http[0]??""];const b={blockExplorerUrls:u,chainId:y(t),chainName:e?.chainName??s.name,iconUrls:e?.iconUrls,nativeCurrency:e?.nativeCurrency??s.nativeCurrency,rpcUrls:m};return await c.request({method:"wallet_addEthereumChain",params:[b]}),s}catch(u){throw new f(u)}throw new C(d)}},onAccountsChanged(e){e.length===0?this.onDisconnect():n.emitter.emit("change",{accounts:e.map(t=>w(t))})},onChainChanged(e){const t=Number(e);n.emitter.emit("change",{chainId:t})},async onDisconnect(e){n.emitter.emit("disconnect");const t=await this.getProvider();i&&(t.removeListener("accountsChanged",i),i=void 0),r&&(t.removeListener("chainChanged",r),r=void 0),a&&(t.removeListener("disconnect",a),a=void 0)}}))}A.type="safe";function A(o={}){const{shimDisconnect:l=!1}=o;let h,i;return I(r=>({id:"safe",name:"Safe",type:A.type,async connect(){const a=await this.getProvider();if(!a)throw new g;const n=await this.getAccounts(),e=await this.getChainId();return i||(i=this.onDisconnect.bind(this),a.on("disconnect",i)),l&&await r.storage?.removeItem("safe.disconnected"),{accounts:n,chainId:e}},async disconnect(){const a=await this.getProvider();if(!a)throw new g;i&&(a.removeListener("disconnect",i),i=void 0),l&&await r.storage?.setItem("safe.disconnected",!0)},async getAccounts(){const a=await this.getProvider();if(!a)throw new g;return(await a.request({method:"eth_accounts"})).map(w)},async getProvider(){if(typeof window<"u"&&window?.parent!==window){if(!h){const{default:a}=await _(async()=>{const{default:s}=await v(()=>import("./index-DhpA2FL2-DXMYeMbX.js"),__vite__mapDeps([5,6,2,3]));return{default:s}},p([7,8,2,3])),n=new a(o),e=await D(()=>n.safe.getInfo(),{timeout:o.unstable_getInfoTimeout??10});if(!e)throw new Error("Could not load Safe information");const t=await(async()=>{const s=await _(()=>v(()=>import("./index-nE_b9WcW-Bpm9jvBz.js"),__vite__mapDeps([7,2,3,6])).then(c=>c.i),p([9,3,8,5,2,6]));return typeof s.SafeAppProvider!="function"&&typeof s.default.SafeAppProvider=="function"?s.default.SafeAppProvider:s.SafeAppProvider})();h=new t(e,n)}return h}},async getChainId(){const a=await this.getProvider();if(!a)throw new g;return Number(a.chainId)},async isAuthorized(){try{return l&&await r.storage?.getItem("safe.disconnected")?!1:!!(await this.getAccounts()).length}catch{return!1}},onAccountsChanged(){},onChainChanged(){},onDisconnect(){r.emitter.emit("disconnect")}}))}export{P as coinbaseWallet,S as injected,A as safe};
//# sourceMappingURL=index-ChhyusO2-DAa6Xq7i.js.map
