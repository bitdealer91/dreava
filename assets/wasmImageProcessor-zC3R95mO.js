class y{constructor(){this.wasmModule=null,this.wasmLoaded=!1,this.canvasProcessor=null,this.initCanvasProcessor()}async initCanvasProcessor(){this.canvasProcessor=new z,console.log("‚úÖ Canvas image processor initialized as fallback")}async loadWasm(){try{const a="/wasm/image-processor.wasm";(await fetch(a,{method:"HEAD"})).ok?(this.wasmModule=await WebAssembly.instantiateStreaming(fetch(a)),this.wasmLoaded=!0,console.log("‚úÖ WASM image processor loaded successfully")):console.warn("‚ö†Ô∏è WASM file not found, using Canvas fallback")}catch(a){console.warn("‚ö†Ô∏è WASM loading failed, using Canvas fallback:",a)}}async optimize(a,t=.8){if(this.wasmLoaded&&this.wasmModule)try{return await this.wasmOptimize(a,t)}catch{console.warn("‚ö†Ô∏è WASM optimization failed, falling back to Canvas")}return await this.canvasOptimize(a,t)}async wasmOptimize(a,t){return await this.canvasOptimize(a,t)}async canvasOptimize(a,t){return new Promise(c=>{const i=document.createElement("canvas"),r=i.getContext("2d"),m=new Image;m.onload=()=>{let{width:o,height:e}=m;if(o>1200||e>900){const s=Math.min(1200/o,900/e);o*=s,e*=s}i.width=o,i.height=e,r.imageSmoothingEnabled=!0,r.imageSmoothingQuality="high",r.drawImage(m,0,0,o,e),i.toBlob(s=>{const n=new File([s],a.name,{type:a.type,lastModified:Date.now()});console.log(`üì± Canvas optimization: ${a.size} -> ${n.size} bytes`),c(n)},a.type,t)},m.onerror=()=>{console.warn("‚ö†Ô∏è Image loading failed, returning original file"),c(a)},m.src=URL.createObjectURL(a)})}async resizeImage(a,t,c){return await this.canvasOptimize(a,1,{maxWidth:t,maxHeight:c})}async compressImage(a,t){return await this.canvasOptimize(a,t)}async convertFormat(a,t){return await this.canvasOptimize(a,.9,{format:t})}}class z{constructor(){this.supportedFormats=["image/jpeg","image/png","image/webp"]}async optimize(a,t=.8,c={}){const{maxWidth:i,maxHeight:r,format:m}=c;return new Promise(h=>{const g=document.createElement("canvas"),o=g.getContext("2d"),e=new Image;e.onload=()=>{let{width:s,height:n}=e;if(i&&s>i){const l=i/s;s=i,n*=l}if(r&&n>r){const l=r/n;n=r,s*=l}g.width=s,g.height=n,o.imageSmoothingEnabled=!0,o.imageSmoothingQuality="high",o.drawImage(e,0,0,s,n);const w=m||a.type,p=this.supportedFormats.includes(w)?w:"image/jpeg";g.toBlob(l=>{const d=new File([l],a.name,{type:p,lastModified:Date.now()});console.log(`üì± Canvas optimization: ${a.size} -> ${d.size} bytes (${Math.round((1-d.size/a.size)*100)}% reduction)`),h(d)},p,t)},e.onerror=()=>{console.warn("‚ö†Ô∏è Image loading failed, returning original file"),h(a)},e.src=URL.createObjectURL(a)})}}export{y as WasmImageProcessor};
//# sourceMappingURL=wasmImageProcessor-zC3R95mO.js.map
