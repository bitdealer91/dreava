{"version":3,"file":"serviceWorkerCache-BN3PYH06.js","sources":["../../src/utils/serviceWorkerCache.js"],"sourcesContent":["// serviceWorkerCache.js - Service Worker кэш для загрузок\nexport class ServiceWorkerCache {\n  constructor() {\n    this.cacheName = 'dreava-upload-cache-v1';\n    this.initialized = false;\n    this.init();\n  }\n\n  async init() {\n    try {\n      // Проверяем поддержку Service Worker\n      if ('serviceWorker' in navigator) {\n        await this.registerServiceWorker();\n        this.initialized = true;\n        // Service Worker cache initialized\n      } else {\n        // Service Worker not supported\n      }\n    } catch (error) {\n              // Service Worker cache initialization failed\n    }\n  }\n\n  async registerServiceWorker() {\n    try {\n      // Register SW from public/ in production, and no-op in dev (Vite dev server)\n      if (location.hostname === 'localhost' || location.port) {\n        return null;\n      }\n      const registration = await navigator.serviceWorker.register('/sw.js', { scope: '/' });\n      return registration;\n    } catch (error) {\n      // Ignore SW registration errors to avoid blocking app boot\n      console.warn('ServiceWorker registration skipped/failed:', error);\n      return null;\n    }\n  }\n\n  async cacheUpload(file, metadata) {\n    if (!this.initialized) return;\n\n    try {\n      const cache = await caches.open(this.cacheName);\n      const fileHash = await this.generateFileHash(file);\n      const cacheKey = `upload_${fileHash}`;\n      \n      // Создаем Response с метаданными\n      const response = new Response(JSON.stringify(metadata), {\n        headers: {\n          'Content-Type': 'application/json',\n          'Cache-Control': 'max-age=86400' // 24 часа\n        }\n      });\n      \n      await cache.put(cacheKey, response);\n      // Cached upload\n      \n      return cacheKey;\n    } catch (error) {\n      // Cache upload failed\n    }\n  }\n\n  async getCachedUpload(file) {\n    if (!this.initialized) return null;\n\n    try {\n      const cache = await caches.open(this.cacheName);\n      const fileHash = await this.generateFileHash(file);\n      const cacheKey = `upload_${fileHash}`;\n      \n      const response = await cache.match(cacheKey);\n      if (response) {\n        const metadata = await response.json();\n        // Cache hit for upload\n        return metadata;\n      }\n      \n      return null;\n    } catch (error) {\n      // Get cached upload failed\n      return null;\n    }\n  }\n\n  async cacheMetadata(collectionId, metadata) {\n    if (!this.initialized) return;\n\n    try {\n      const cache = await caches.open(this.cacheName);\n      const cacheKey = `metadata_${collectionId}`;\n      \n      const response = new Response(JSON.stringify(metadata), {\n        headers: {\n          'Content-Type': 'application/json',\n          'Cache-Control': 'max-age=3600' // 1 час\n        }\n      });\n      \n      await cache.put(cacheKey, response);\n      // Cached metadata\n      \n      return cacheKey;\n    } catch (error) {\n      // Cache metadata failed\n    }\n  }\n\n  async getCachedMetadata(collectionId) {\n    if (!this.initialized) return null;\n\n    try {\n      const cache = await caches.open(this.cacheName);\n      const cacheKey = `metadata_${collectionId}`;\n      \n      const response = await cache.match(cacheKey);\n      if (response) {\n        const metadata = await response.json();\n        // Cache hit for metadata\n        return metadata;\n      }\n      \n      return null;\n    } catch (error) {\n      // Get cached metadata failed\n      return null;\n    }\n  }\n\n  async clearCache() {\n    if (!this.initialized) return;\n\n    try {\n      const cache = await caches.open(this.cacheName);\n      const keys = await cache.keys();\n      \n      for (const key of keys) {\n        await cache.delete(key);\n      }\n      \n      // Cache cleared\n    } catch (error) {\n      // Clear cache failed\n    }\n  }\n\n  async getCacheStats() {\n    if (!this.initialized) return null;\n\n    try {\n      const cache = await caches.open(this.cacheName);\n      const keys = await cache.keys();\n      \n      let totalSize = 0;\n      for (const key of keys) {\n        const response = await cache.match(key);\n        if (response) {\n          const blob = await response.blob();\n          totalSize += blob.size;\n        }\n      }\n      \n      return {\n        entries: keys.length,\n        totalSize,\n        cacheName: this.cacheName\n      };\n    } catch (error) {\n      // Get cache stats failed\n      return null;\n    }\n  }\n\n  async generateFileHash(file) {\n    return new Promise((resolve) => {\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        const arrayBuffer = e.target.result;\n        const hash = crypto.subtle.digest('SHA-256', arrayBuffer).then(hashBuffer => {\n          const hashArray = Array.from(new Uint8Array(hashBuffer));\n          const hashHex = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\n          resolve(hashHex);\n        });\n      };\n      reader.readAsArrayBuffer(file);\n    });\n  }\n\n  // Методы для работы с сетью\n  async cacheNetworkResponse(url, response) {\n    if (!this.initialized) return;\n\n    try {\n      const cache = await caches.open(this.cacheName);\n      await cache.put(url, response.clone());\n      // Cached network response\n    } catch (error) {\n      // Cache network response failed\n    }\n  }\n\n  async getCachedNetworkResponse(url) {\n    if (!this.initialized) return null;\n\n    try {\n      const cache = await caches.open(this.cacheName);\n      const response = await cache.match(url);\n      if (response) {\n        // Cache hit for network response\n        return response;\n      }\n      return null;\n    } catch (error) {\n      // Get cached network response failed\n      return null;\n    }\n  }\n} "],"names":["ServiceWorkerCache","error","file","metadata","cache","cacheKey","response","collectionId","keys","key","totalSize","blob","resolve","reader","e","arrayBuffer","hashBuffer","hashHex","b","url"],"mappings":"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"}