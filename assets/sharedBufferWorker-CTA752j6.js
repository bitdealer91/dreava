class u{constructor(){this.worker=null,this.initialized=!1,this.bufferSize=1024*1024,this.init()}async init(){try{typeof SharedArrayBuffer<"u"?(this.worker=new Worker("/workers/shared-buffer-worker.js"),this.worker.onmessage=this.handleMessage.bind(this),this.worker.onerror=this.handleError.bind(this),this.initialized=!0,console.log("‚úÖ Shared Buffer Worker initialized")):console.warn("‚ö†Ô∏è SharedArrayBuffer not supported")}catch(e){console.warn("‚ö†Ô∏è Shared Buffer Worker initialization failed:",e)}}handleMessage(e){const{type:s,data:r,id:o}=e.data;switch(s){case"PROCESSING_COMPLETE":console.log("‚úÖ Shared buffer processing complete:",r);break;case"PROCESSING_PROGRESS":console.log("üìä Shared buffer progress:",r);break;case"ERROR":console.error("‚ùå Shared buffer error:",r);break;default:console.log("üì® Shared buffer message:",s,r)}}handleError(e){console.error("‚ùå Shared Buffer Worker error:",e)}async processFiles(e){return this.initialized?new Promise((s,r)=>{const o=Date.now(),l=setTimeout(()=>{console.error("‚è∞ Shared buffer processing timeout"),r(new Error("Processing timeout"))},3e4),a=n=>{const{type:t,data:c,id:f}=n.data;f===o&&(clearTimeout(l),this.worker.removeEventListener("message",a),t==="PROCESSING_COMPLETE"?s(c):t==="ERROR"&&r(new Error(c)))};this.worker.addEventListener("message",a);const i=e.map(n=>{const t=new SharedArrayBuffer(this.bufferSize);return{file:n,buffer:t}});this.worker.postMessage({type:"PROCESS_FILES",data:{files:i},id:o})}):(console.warn("‚ö†Ô∏è Shared Buffer Worker not available, using fallback"),await this.fallbackProcessing(e))}async fallbackProcessing(e){console.log("üîÑ Using fallback processing for files:",e.length);const s=[];for(const r of e)try{const o=await this.processFileFallback(r);s.push(o)}catch(o){console.error("‚ùå Fallback processing failed for file:",r.name,o),s.push({error:o.message})}return s}async processFileFallback(e){return new Promise(s=>{const r=new FileReader;r.onload=o=>{const l=o.target.result,a=new Uint8Array(l);let i=0;for(let n=0;n<a.length;n++)i+=a[n];s({file:e.name,size:e.size,checksum:i,processed:!0})},r.onerror=()=>{s({file:e.name,error:"File reading failed",processed:!1})},r.readAsArrayBuffer(e)})}async compressData(e){return this.initialized?new Promise((s,r)=>{const o=Date.now(),l=setTimeout(()=>{console.error("‚è∞ Compression timeout"),r(new Error("Compression timeout"))},1e4),a=i=>{const{type:n,data:t,id:c}=i.data;c===o&&(clearTimeout(l),this.worker.removeEventListener("message",a),n==="COMPRESSION_COMPLETE"?s(t):n==="ERROR"&&r(new Error(t)))};this.worker.addEventListener("message",a),this.worker.postMessage({type:"COMPRESS_DATA",data:{data:e},id:o})}):await this.fallbackCompression(e)}async fallbackCompression(e){try{const s=new CompressionStream("gzip"),r=s.writable.getWriter(),o=s.readable.getReader(),l=new Uint8Array(e);r.write(l),r.close();const a=[];for(;;){const{done:t,value:c}=await o.read();if(t)break;a.push(c)}const i=new Uint8Array(a.reduce((t,c)=>t+c.length,0));let n=0;for(const t of a)i.set(t,n),n+=t.length;return i.buffer}catch(s){return console.warn("‚ö†Ô∏è Fallback compression failed:",s),e}}async decompressData(e){return this.initialized?new Promise((s,r)=>{const o=Date.now(),l=setTimeout(()=>{console.error("‚è∞ Decompression timeout"),r(new Error("Decompression timeout"))},1e4),a=i=>{const{type:n,data:t,id:c}=i.data;c===o&&(clearTimeout(l),this.worker.removeEventListener("message",a),n==="DECOMPRESSION_COMPLETE"?s(t):n==="ERROR"&&r(new Error(t)))};this.worker.addEventListener("message",a),this.worker.postMessage({type:"DECOMPRESS_DATA",data:{data:e},id:o})}):await this.fallbackDecompression(e)}async fallbackDecompression(e){try{const s=new DecompressionStream("gzip"),r=s.writable.getWriter(),o=s.readable.getReader(),l=new Uint8Array(e);r.write(l),r.close();const a=[];for(;;){const{done:t,value:c}=await o.read();if(t)break;a.push(c)}const i=new Uint8Array(a.reduce((t,c)=>t+c.length,0));let n=0;for(const t of a)i.set(t,n),n+=t.length;return i.buffer}catch(s){return console.warn("‚ö†Ô∏è Fallback decompression failed:",s),e}}destroy(){this.worker&&(this.worker.terminate(),this.worker=null),this.initialized=!1}}export{u as SharedBufferWorker};
//# sourceMappingURL=sharedBufferWorker-CTA752j6.js.map
