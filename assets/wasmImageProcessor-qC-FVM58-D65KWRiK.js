class a{constructor(){this.wasmModule=null;this.wasmLoaded=!1;this.canvasProcessor=null;this.initCanvasProcessor()}async initCanvasProcessor(){this.canvasProcessor=new e;console.log("‚úÖ Canvas image processor initialized as fallback")}async loadWasm(){try{const a="/wasm/image-processor.wasm";const e=await fetch(a,{method:"HEAD"});if(e.ok){this.wasmModule=await WebAssembly.instantiateStreaming(fetch(a));this.wasmLoaded=!0;console.log("‚úÖ WASM image processor loaded successfully")}else console.warn("‚ö†Ô∏è WASM file not found, using Canvas fallback")}catch(a){console.warn("‚ö†Ô∏è WASM loading failed, using Canvas fallback:",a)}}async optimize(a,e=.8){if(this.wasmLoaded&&this.wasmModule)try{return await this.wasmOptimize(a,e)}catch(t){console.warn("‚ö†Ô∏è WASM optimization failed, falling back to Canvas")}return await this.canvasOptimize(a,e)}async wasmOptimize(a,e){return await this.canvasOptimize(a,e)}async canvasOptimize(a,e){return new Promise(t=>{const i=document.createElement("canvas");const s=i.getContext("2d");const o=new Image;o.onload=()=>{const n=1200;const c=900;let{width:r,height:m}=o;if(r>n||m>c){const a=Math.min(n/r,c/m);r*=a;m*=a}i.width=r;i.height=m;s.imageSmoothingEnabled=!0;s.imageSmoothingQuality="high";s.drawImage(o,0,0,r,m);i.toBlob(e=>{const i=new File([e],a.name,{type:a.type,lastModified:Date.now()});console.log(`üì± Canvas optimization: ${a.size} -> ${i.size} bytes`);t(i)},a.type,e)};o.onerror=()=>{console.warn("‚ö†Ô∏è Image loading failed, returning original file");t(a)};o.src=URL.createObjectURL(a)})}async resizeImage(a,e,t){return await this.canvasOptimize(a,1,{maxWidth:e,maxHeight:t})}async compressImage(a,e){return await this.canvasOptimize(a,e)}async convertFormat(a,e){return await this.canvasOptimize(a,.9,{format:e})}}class e{constructor(){this.supportedFormats=["image/jpeg","image/png","image/webp"]}async optimize(a,e=.8,t={}){const{maxWidth:i,maxHeight:s,format:o}=t;return new Promise(t=>{const n=document.createElement("canvas");const c=n.getContext("2d");const r=new Image;r.onload=()=>{let{width:m,height:l}=r;if(i&&m>i){const a=i/m;m=i;l*=a}if(s&&l>s){const a=s/l;l=s;m*=a}n.width=m;n.height=l;c.imageSmoothingEnabled=!0;c.imageSmoothingQuality="high";c.drawImage(r,0,0,m,l);const g=o||a.type;const h=this.supportedFormats.includes(g)?g:"image/jpeg";n.toBlob(e=>{const i=new File([e],a.name,{type:h,lastModified:Date.now()});console.log(`üì± Canvas optimization: ${a.size} -> ${i.size} bytes (${Math.round(100*(1-i.size/a.size))}% reduction)`);t(i)},h,e)};r.onerror=()=>{console.warn("‚ö†Ô∏è Image loading failed, returning original file");t(a)};r.src=URL.createObjectURL(a)})}}export{a as WasmImageProcessor};
//# sourceMappingURL=wasmImageProcessor-qC-FVM58-D65KWRiK.js.map
