<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/logo.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="description" content="Dreava Launchpad - NFT Launchpad Platform" />
    
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content="https://dreava.art/" />
    <meta property="og:title" content="Dreava Launchpad - NFT Launchpad Platform" />
    <meta property="og:description" content="Create, launch, and trade NFT collections on the Somnia blockchain. Join the future of digital art and collectibles." />
    <meta property="og:image" content="https://dreava.art/og-image.svg" />
    <meta property="og:site_name" content="Dreava Launchpad" />
    
    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content="https://dreava.art/" />
    <meta property="twitter:title" content="Dreava Launchpad - NFT Launchpad Platform" />
    <meta property="twitter:description" content="Create, launch, and trade NFT collections on the Somnia blockchain. Join the future of digital art and collectibles." />
    <meta property="twitter:image" content="https://dreava.art/og-image.svg" />
    
    <!-- Additional Meta Tags -->
    <meta name="theme-color" content="#000000" />
    <meta name="keywords" content="NFT, blockchain, digital art, collectibles, Somnia, launchpad" />
    <meta name="author" content="Dreava" />
    
    <title>Dreava Launchpad</title>
  </head>
  <body>
    <div id="root"></div>
    
    <!-- üõ°Ô∏è –ê–ì–†–ï–°–°–ò–í–ù–´–ô BigInt –ø–æ–ª–∏—Ñ–∏–ª–ª –î–û –≤—Å–µ—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤ -->
    <script>
      // –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π BigInt –ø–æ–ª–∏—Ñ–∏–ª–ª –¥–ª—è production
      (function() {
        'use strict';
        
        console.log('üöÄ Loading AGGRESSIVE BigInt polyfill...');
        
        // üîß MetaMask —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å - –ü–ï–†–í–´–ú –î–ï–õ–û–ú
        if (typeof window.ethereum !== 'undefined') {
          console.log('‚úÖ MetaMask already detected, preserving provider');
        } else {
          // –°–æ–∑–¥–∞–µ–º placeholder –¥–ª—è ethereum provider
          Object.defineProperty(window, 'ethereum', {
            configurable: true,
            enumerable: true,
            get: function() {
              return window._ethereumProvider;
            },
            set: function(value) {
              if (!window._ethereumProvider) {
                window._ethereumProvider = value;
                console.log('‚úÖ Ethereum provider set:', value);
              } else {
                console.warn('‚ö†Ô∏è Ethereum provider already set, ignoring duplicate');
              }
            }
          });
        }
        
        // üö® –ü–ï–†–ï–•–í–ê–¢–´–í–ê–ï–ú –í–°–ï –û–®–ò–ë–ö–ò –ì–õ–û–ë–ê–õ–¨–ù–û
        const originalError = console.error;
        const originalWarn = console.warn;
        
        // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º console.error
        console.error = function(...args) {
          const message = args.join(' ');
          
          // –§–∏–ª—å—Ç—Ä—É–µ–º BigInt –æ—à–∏–±–∫–∏
          if (message.includes('BigInt') && message.includes('Cannot convert')) {
            console.warn('üö® BigInt conversion error intercepted:', message);
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ–º –∫—ç—à wagmi
            try {
              if (typeof localStorage !== 'undefined') {
                localStorage.removeItem('wagmi.cache');
                localStorage.removeItem('wagmi.wallet');
                localStorage.removeItem('wagmi.connected');
                localStorage.removeItem('wagmi.account');
                localStorage.removeItem('wagmi.chainId');
                console.log('‚úÖ Wagmi cache cleared after BigInt error');
              }
            } catch (e) {
              console.warn('‚ö†Ô∏è Failed to clear wagmi cache:', e);
            }
            
            return; // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
          }
          
          // –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π console.error
          return originalError.apply(console, args);
        };
        
        // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º console.warn
        console.warn = function(...args) {
          const message = args.join(' ');
          
          // –§–∏–ª—å—Ç—Ä—É–µ–º BigInt –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
          if (message.includes('BigInt') && message.includes('Cannot convert')) {
            console.log('üö® BigInt warning intercepted:', message);
            return; // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
          }
          
          // –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π console.warn
          return originalWarn.apply(console, args);
        };
        
        // üõ°Ô∏è –ê–ì–†–ï–°–°–ò–í–ù–´–ï BigInt –æ–ø–µ—Ä–∞—Ü–∏–∏
        const originalBigInt = window.BigInt;
        
        // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ BigInt –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        window.BigInt = function(value) {
          try {
            if (typeof value === 'bigint') return value;
            
            if (typeof value === 'string') {
              const cleanValue = value.replace(/n$/, '');
              if (isNaN(parseFloat(cleanValue))) {
                console.log('‚ö†Ô∏è Invalid BigInt string:', value, 'using 0n');
                return 0n;
              }
              return originalBigInt(cleanValue);
            }
            
            if (typeof value === 'number') {
              if (!isFinite(value)) {
                console.log('‚ö†Ô∏è Invalid BigInt number:', value, 'using 0n');
                return 0n;
              }
              return originalBigInt(Math.floor(value));
            }
            
            return originalBigInt(value);
          } catch (error) {
            console.log('‚ö†Ô∏è BigInt conversion failed:', error, 'Value:', value, 'using 0n');
            return 0n;
          }
        };
        
        // üîß –ü–ï–†–ï–•–í–ê–¢–´–í–ê–ï–ú Number() –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        const originalNumber = window.Number;
        window.Number = function(value) {
          try {
            if (typeof value === 'bigint') {
              const stringValue = value.toString();
              const parsed = parseFloat(stringValue);
              if (isNaN(parsed)) {
                console.log('‚ö†Ô∏è BigInt to Number conversion failed, using 0');
                return 0;
              }
              return parsed;
            }
            
            return originalNumber(value);
          } catch (error) {
            console.log('‚ö†Ô∏è Number conversion failed:', error, 'Value:', value, 'using 0');
            return 0;
          }
        };
        
        // üîß –ü–ï–†–ï–•–í–ê–¢–´–í–ê–ï–ú parseInt –∏ parseFloat (—É–±—Ä–∞–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ)
        // –≠—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –Ω–∏–∂–µ –¥–ª—è –∫–æ—à–µ–ª—å–∫–æ–≤
        

        
        window.parseFloat = function(value) {
          try {
            if (typeof value === 'bigint') {
              const stringValue = value.toString();
              return originalParseFloat(stringValue);
            }
            return originalParseFloat(value);
          } catch (error) {
            console.log('‚ö†Ô∏è parseFloat failed:', error, 'Value:', value, 'using 0');
            return 0;
          }
        };
        
        // üîß –ü–û–õ–ò–§–ò–õ–õ–´ –¥–ª—è Number –º–µ—Ç–æ–¥–æ–≤ (–∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è MetaMask!)
        if (!Number.isInteger) {
          Number.isInteger = function(value) {
            try {
              return typeof value === 'number' && 
                     isFinite(value) && 
                     Math.floor(value) === value;
            } catch (error) {
              console.log('‚ö†Ô∏è Number.isInteger polyfill failed:', error);
              return false;
            }
          };
          console.log('‚úÖ Number.isInteger polyfill added');
        }
        
        if (!Number.isSafeInteger) {
          Number.isSafeInteger = function(value) {
            try {
              return Number.isInteger(value) && 
                     value >= Number.MIN_SAFE_INTEGER && 
                     value <= Number.MAX_SAFE_INTEGER;
            } catch (error) {
              console.log('‚ö†Ô∏è Number.isSafeInteger polyfill failed:', error);
              return false;
            }
          };
          console.log('‚úÖ Number.isSafeInteger polyfill added');
        }
        
        if (!Number.isFinite) {
          Number.isFinite = function(value) {
            try {
              return typeof value === 'number' && isFinite(value);
            } catch (error) {
              console.log('‚ö†Ô∏è Number.isFinite polyfill failed:', error);
              return false;
            }
          };
          console.log('‚úÖ Number.isFinite polyfill added');
        }
        
        if (!Number.isNaN) {
          Number.isNaN = function(value) {
            try {
              return typeof value === 'number' && isNaN(value);
            } catch (error) {
              console.log('‚ö†Ô∏è Number.isNaN polyfill failed:', error);
              return false;
            }
          };
          console.log('‚úÖ Number.isNaN polyfill added');
        }
        
        // üîß –ü–û–õ–ò–§–ò–õ–õ–´ –¥–ª—è Math –º–µ—Ç–æ–¥–æ–≤
        if (!Math.sign) {
          Math.sign = function(value) {
            try {
              if (value === 0 || isNaN(value)) return value;
              return value > 0 ? 1 : -1;
            } catch (error) {
              console.log('‚ö†Ô∏è Math.sign polyfill failed:', error);
              return 1;
            }
          };
          console.log('‚úÖ Math.sign polyfill added');
        }
        
        if (!Math.trunc) {
          Math.trunc = function(value) {
            try {
              if (isNaN(value) || !isFinite(value)) return value;
              return value < 0 ? Math.ceil(value) : Math.floor(value);
            } catch (error) {
              console.log('‚ö†Ô∏è Math.trunc polyfill failed:', error);
              return 0;
            }
          };
          console.log('‚úÖ Math.trunc polyfill added');
        }
        
        // üö® –ü–ï–†–ï–•–í–ê–¢–´–í–ê–ï–ú –ì–õ–û–ë–ê–õ–¨–ù–´–ï –û–®–ò–ë–ö–ò
        window.addEventListener('error', function(event) {
          const message = event.error?.message || event.message || '';
          
          // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º BigInt –æ—à–∏–±–∫–∏
          if (message.includes('BigInt')) {
            console.log('üö® Global BigInt error intercepted:', message);
            event.preventDefault();
            event.stopPropagation();
            return false;
          }
          
          // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º integer –≤–∞–ª–∏–¥–∞—Ü–∏—é –æ—à–∏–±–∫–∏
          if (message.includes('invalid integer') || 
              message.includes('positive integer expected') ||
              message.includes('Wrong integer') ||
              message.includes('Wrong positive integer')) {
            console.log('üö® Integer validation error intercepted:', message);
            event.preventDefault();
            event.stopPropagation();
            return false;
          }
        });
        
        // üö® –ü–ï–†–ï–•–í–ê–¢–´–í–ê–ï–ú –ù–ï–û–ë–†–ê–ë–û–¢–ê–ù–ù–´–ï –ü–†–û–ú–ò–°–´
        window.addEventListener('unhandledrejection', function(event) {
          const message = event.reason?.message || '';
          
          // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º BigInt –æ—à–∏–±–∫–∏
          if (message.includes('BigInt')) {
            console.log('üö® Unhandled BigInt promise rejection intercepted:', message);
            event.preventDefault();
            event.stopPropagation();
            return false;
          }
          
          // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º integer –≤–∞–ª–∏–¥–∞—Ü–∏—é –æ—à–∏–±–∫–∏
          if (message.includes('invalid integer') || 
              message.includes('positive integer expected') ||
              message.includes('Wrong integer') ||
              message.includes('Wrong positive integer')) {
            console.log('üö® Unhandled integer validation rejection intercepted:', message);
            event.preventDefault();
            event.stopPropagation();
            return false;
          }
        });
        
        // üîß –ê–ì–†–ï–°–°–ò–í–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø –ß–ò–°–ï–õ –¥–ª—è –∫–æ—à–µ–ª—å–∫–æ–≤
        const originalIsInteger = Number.isInteger;
        const originalIsSafeInteger = Number.isSafeInteger;
        
        // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º Number.isInteger
        Number.isInteger = function(value) {
          try {
            // –ï—Å–ª–∏ —ç—Ç–æ BigInt - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ
            if (typeof value === 'bigint') {
              const stringValue = value.toString();
              const parsed = parseFloat(stringValue);
              return !isNaN(parsed) && isFinite(parsed) && Math.floor(parsed) === parsed;
            }
            
            // –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ - –ø—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å
            if (typeof value === 'string') {
              const parsed = parseFloat(value);
              return !isNaN(parsed) && isFinite(parsed) && Math.floor(parsed) === parsed;
            }
            
            // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞
            return originalIsInteger(value);
          } catch (error) {
            console.log('‚ö†Ô∏è Number.isInteger validation failed:', error, 'Value:', value);
            return false;
          }
        };
        
        // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º Number.isSafeInteger
        Number.isSafeInteger = function(value) {
          try {
            // –ï—Å–ª–∏ —ç—Ç–æ BigInt - –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
            if (typeof value === 'bigint') {
              const stringValue = value.toString();
              const parsed = parseFloat(stringValue);
              return Number.isInteger(parsed) && 
                     parsed >= Number.MIN_SAFE_INTEGER && 
                     parsed <= Number.MAX_SAFE_INTEGER;
            }
            
            // –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ - –ø—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å
            if (typeof value === 'string') {
              const parsed = parseFloat(value);
              return Number.isInteger(parsed) && 
                     parsed >= Number.MIN_SAFE_INTEGER && 
                     parsed <= Number.MAX_SAFE_INTEGER;
            }
            
            // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞
            return originalIsSafeInteger(value);
          } catch (error) {
            console.log('‚ö†Ô∏è Number.isSafeInteger validation failed:', error, 'Value:', value);
            return false;
          }
        };
        
        // üîß –ü–ï–†–ï–•–í–ê–¢–´–í–ê–ï–ú parseInt –¥–ª—è –∫–æ—à–µ–ª—å–∫–æ–≤
        const originalParseInt = window.parseInt;
        window.parseInt = function(value, radix) {
          try {
            // –ï—Å–ª–∏ —ç—Ç–æ BigInt - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ
            if (typeof value === 'bigint') {
              const stringValue = value.toString();
              return originalParseInt(stringValue, radix);
            }
            
            // –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å 'n' —Å—É—Ñ—Ñ–∏–∫—Å–æ–º - —É–±–∏—Ä–∞–µ–º
            if (typeof value === 'string' && value.endsWith('n')) {
              const cleanValue = value.slice(0, -1);
              return originalParseInt(cleanValue, radix);
            }
            
            // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞
            return originalParseInt(value, radix);
          } catch (error) {
            console.log('‚ö†Ô∏è parseInt validation failed:', error, 'Value:', value, 'using 0');
            return 0;
          }
        };
        
        // üîß –ü–ï–†–ï–•–í–ê–¢–´–í–ê–ï–ú parseFloat –¥–ª—è –∫–æ—à–µ–ª—å–∫–æ–≤
        const originalParseFloat = window.parseFloat;
        window.parseFloat = function(value) {
          try {
            // –ï—Å–ª–∏ —ç—Ç–æ BigInt - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ
            if (typeof value === 'bigint') {
              const stringValue = value.toString();
              return originalParseFloat(stringValue);
            }
            
            // –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å 'n' —Å—É—Ñ—Ñ–∏–∫—Å–æ–º - —É–±–∏—Ä–∞–µ–º
            if (typeof value === 'string' && value.endsWith('n')) {
              const cleanValue = value.slice(0, -1);
              return originalParseFloat(cleanValue);
            }
            
            // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞
            return originalParseFloat(value);
          } catch (error) {
            console.log('‚ö†Ô∏è parseFloat validation failed:', error, 'Value:', value, 'using 0');
            return 0;
          }
        };
        
        console.log('‚úÖ AGGRESSIVE BigInt polyfill loaded successfully');
      })();
    </script>
    
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>
