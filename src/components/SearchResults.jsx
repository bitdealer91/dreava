import React, { useMemo, useCallback } from 'react';
import { useNavigate } from 'react-router-dom';
import { useSearch } from '../contexts/SearchContext';
import { ArrowRight, Image, Package, Loader2 } from 'lucide-react';
import logo from '../assets/logo.svg';
import LazyImage from './LazyImage';

// –£–º–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π NFT —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º gateway
const getNFTImageUrl = (nft) => {
  console.log('üîç getNFTImageUrl called for NFT:', nft.metadata?.name || nft.id, nft.collectionName);
  
  // üéØ –ü–†–ò–û–†–ò–¢–ï–¢ 1: –ì–æ—Ç–æ–≤—ã–µ HTTP URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (—É–∂–µ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å–µ—Ä–æ–º)
  let imageUrl = nft.image || nft.image_url || nft.media_url || '';
  
  // üéØ –ü–†–ò–û–†–ò–¢–ï–¢ 2: –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–∂–µ HTTP URL (–Ω–µ IPFS), –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
  if (imageUrl && !imageUrl.startsWith('ipfs://') && (imageUrl.startsWith('http://') || imageUrl.startsWith('https://'))) {
    console.log('‚úÖ Using pre-converted HTTP image URL:', imageUrl);
    return imageUrl;
  }
  
  // üéØ –ü–†–ò–û–†–ò–¢–ï–¢ 3: –ò–∑ metadata (–µ—Å–ª–∏ –µ—Å—Ç—å)
  if (!imageUrl && nft.metadata) {
    imageUrl = nft.metadata.image || nft.metadata.image_url || nft.metadata.media_url || '';
    console.log('üìã Using metadata image:', imageUrl);
  }
  
  // üéØ –ü–†–ò–û–†–ò–¢–ï–¢ 4: –ï—Å–ª–∏ —ç—Ç–æ IPFS URL, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π gateway
  if (imageUrl && imageUrl.startsWith('ipfs://')) {
    const cid = imageUrl.replace('ipfs://', '');
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    const isLighthouseCollection = 
      nft.collectionName?.toLowerCase().includes('somnia') ||
      nft.collectionName?.toLowerCase().includes('dreava') ||
      nft.collectionName?.toLowerCase().includes('dreava.art');
    
    if (isLighthouseCollection) {
      // –î–ª—è –Ω–∞—à–∏—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º Lighthouse (—Ä–∞–±–æ—Ç–∞–µ—Ç)
      imageUrl = `https://gateway.lighthouse.storage/ipfs/${cid}`;
      console.log('üè≠ Converting to Lighthouse gateway for collection:', nft.collectionName);
    } else {
      // –î–ª—è –≤–Ω–µ—à–Ω–∏—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º Cloudflare (–±—ã—Å—Ç—Ä—ã–π)
      imageUrl = `https://cloudflare-ipfs.com/ipfs/${cid}`;
      console.log('üåê Converting to Cloudflare gateway for external collection:', nft.collectionName);
    }
  }
  
  console.log('‚úÖ Final image URL:', imageUrl);
  return imageUrl;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è fallback –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–æ–±–ª–æ–∂–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ NFT)
const getFallbackImage = (nft) => {
  // Debug: –ª–æ–≥–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
  if (window.allCollections) {
    console.log('üîç Available collections in window.allCollections:', {
      total: window.allCollections.length,
      sample: window.allCollections.slice(0, 3).map(col => ({
        name: col.name,
        nfts: col.nfts?.length || 0,
        firstNFTImage: col.nfts?.[0]?.image
      }))
    });
  }
  
  // –ò—â–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é –≤ allCollections –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
  const collection = window.allCollections?.find(col => 
    col.name === nft.collectionName ||
    col.name?.toLowerCase().includes(nft.collectionName?.toLowerCase()) ||
    nft.collectionName?.toLowerCase().includes(col.name?.toLowerCase())
  );
  
  if (collection) {
    console.log('üîç Found collection for fallback:', {
      name: collection.name,
      nfts: collection.nfts?.length || 0,
      firstNFT: collection.nfts?.[0]
    });
    
    // üéØ –ü–†–ò–û–†–ò–¢–ï–¢ 1: –ï—Å–ª–∏ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –µ—Å—Ç—å NFT —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤–æ–µ
    if (collection.nfts && collection.nfts.length > 0) {
      const firstNFT = collection.nfts[0];
      const nftImage = firstNFT.image || firstNFT.image_url || firstNFT.media_url;
      
      if (nftImage && !nftImage.startsWith('ipfs://')) {
        console.log('üñºÔ∏è Using first NFT image from collection as fallback:', collection.name, nftImage);
        return nftImage;
      }
      
      // –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ IPFS, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –µ–≥–æ
      if (nftImage && nftImage.startsWith('ipfs://')) {
        const cid = nftImage.replace('ipfs://', '');
        const convertedUrl = `https://gateway.lighthouse.storage/ipfs/${cid}`;
        console.log('üñºÔ∏è Converting IPFS NFT image for fallback:', collection.name, convertedUrl);
        return convertedUrl;
      }
    }
    
    // üéØ –ü–†–ò–û–†–ò–¢–ï–¢ 2: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: cover -> banner -> metadataBanner
    const fallbackUrl = collection.cover || collection.banner || collection.metadataBanner;
    if (fallbackUrl) {
      console.log('üñºÔ∏è Using collection fallback image:', collection.name, fallbackUrl);
      return fallbackUrl;
    }
  }
  
  // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∫–æ–ª–ª–µ–∫—Ü–∏—é, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º placeholder
  console.log('‚ö†Ô∏è No fallback image found, using placeholder');
  return null;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è fallback URLs –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è
const getFallbackUrls = (originalUrl) => {
  if (!originalUrl || !originalUrl.startsWith('ipfs://')) {
    return [originalUrl];
  }
  
  const cid = originalUrl.replace('ipfs://', '');
  return [
    `https://gateway.lighthouse.storage/ipfs/${cid}`,
    `https://cloudflare-ipfs.com/ipfs/${cid}`,
    `https://ipfs.io/ipfs/${cid}`,
    `https://dweb.link/ipfs/${cid}`
  ];
};



const SearchResults = () => {
  const { searchResults, showSearchResults, hideSearchResults, searchTerm } = useSearch();
  const navigate = useNavigate();

  // –í–°–ï —Ö—É–∫–∏ –î–û–õ–ñ–ù–´ –±—ã—Ç—å –≤ –Ω–∞—á–∞–ª–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞!
  const handleCollectionClick = useCallback((collection) => {
    hideSearchResults();
    // –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ –∞–¥—Ä–µ—Å—É –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
    navigate(`/launchpad/collection/${collection.address}`);
    console.log('Collection clicked:', collection);
  }, [hideSearchResults, navigate]);

  const handleNFTClick = useCallback((nft) => {
    hideSearchResults();
    // –ü–µ—Ä–µ–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ NFT –≤ MyNFTs
    const searchParams = new URLSearchParams();
    if (nft.id) searchParams.set('nftId', nft.id);
    if (nft.token?.address) searchParams.set('contract', nft.token.address);
    if (nft.metadata?.name) searchParams.set('nftName', nft.metadata.name);
    if (nft.collectionName) searchParams.set('collection', nft.collectionName);
    
    // –ù–∞–≤–∏–≥–∞—Ü–∏—è —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ–∏—Å–∫–∞
    navigate(`/my-nfts?${searchParams.toString()}`);
    console.log('NFT clicked with search params:', nft, searchParams.toString());
  }, [hideSearchResults, navigate]);

  const handleViewAllCollections = useCallback(() => {
    hideSearchResults();
    navigate('/');
  }, [hideSearchResults, navigate]);

  const handleViewAllNFTs = useCallback(() => {
    hideSearchResults();
    navigate('/my-nfts');
  }, [hideSearchResults, navigate]);

  const totalResults = useMemo(() => 
    searchResults.collections.length + searchResults.nfts.length, 
    [searchResults.collections.length, searchResults.nfts.length]
  );

  // –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  const displayedCollections = useMemo(() => 
    searchResults.collections.slice(0, 3), 
    [searchResults.collections]
  );

  const displayedNFTs = useMemo(() => 
    searchResults.nfts.slice(0, 3), 
    [searchResults.nfts]
  );

  // –†–∞–Ω–Ω–∏–π return –ü–û–°–õ–ï –≤—Å–µ—Ö —Ö—É–∫–æ–≤
  if (!showSearchResults || !searchTerm) {
    return null;
  }

  return (
    <div className="absolute top-full left-0 right-0 mt-2 bg-zinc-900/95 backdrop-blur-sm border border-zinc-700/30 rounded-xl shadow-xl z-50 max-h-96 overflow-y-auto">
      {searchResults.isLoading ? (
        <div className="p-6 text-center">
          <Loader2 className="w-6 h-6 animate-spin mx-auto text-zinc-400 mb-2" />
          <p className="text-zinc-400">Searching...</p>
        </div>
      ) : totalResults === 0 ? (
        <div className="p-6 text-center">
          <Package className="w-8 h-8 mx-auto text-zinc-400 mb-2" />
          <p className="text-zinc-400">No results found for "{searchTerm}"</p>
        </div>
      ) : (
        <div className="p-4">
          {/* Collections Section */}
          {searchResults.collections.length > 0 && (
            <div className="mb-4">
              <div className="flex items-center justify-between mb-3">
                <h3 className="text-sm font-semibold text-zinc-300 flex items-center gap-2">
                  <Package className="w-4 h-4" />
                  Collections ({searchResults.collections.length})
                </h3>
                <button
                  onClick={handleViewAllCollections}
                  className="text-xs text-blue-400 hover:text-blue-300 transition-colors"
                >
                  View all
                </button>
              </div>
                             <div className="space-y-2">
                 {displayedCollections.map((collection, index) => {
                   // Debug: –ª–æ–≥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è
                   if (index === 0) {
                     console.log('üîç First collection in search results:', {
                       name: collection.name,
                       cover: collection.cover,
                       banner: collection.banner,
                       metadataBanner: collection.metadataBanner,
                       nfts: collection.nfts,
                       nftsCount: collection.nfts?.length || 0,
                       firstNFTImage: collection.nfts?.[0]?.image,
                       firstNFT: collection.nfts?.[0],
                       fullCollection: collection
                     });
                   }
                   
                   return (
                     <div
                       key={`collection-${index}`}
                       onClick={() => handleCollectionClick(collection)}
                       className="flex items-center gap-3 p-2 rounded-lg hover:bg-zinc-800/50 cursor-pointer transition-colors"
                     >
                     <div className="w-10 h-10 rounded-lg bg-zinc-800 flex items-center justify-center flex-shrink-0 overflow-hidden">
                        {(() => {
                          // –í—ã–±–∏—Ä–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏
                          const rawUrl = collection.cover || collection.banner || collection.metadataBanner || collection.metadata?.image || collection.metadata?.banner;
                          const src = rawUrl;
                          return rawUrl ? (
                            <LazyImage
                              src={src}
                           alt={collection.name}
                           className="w-full h-full object-cover"
                           priority={index < 2} // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –ø–µ—Ä–≤—ã—Ö 2 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                           sizes="40px"
                           onError={(e) => {
                             console.warn('‚ö†Ô∏è Collection image failed to load:', e.target.src);
                             e.target.style.display = 'none';
                             e.target.nextSibling.style.display = 'flex';
                           }}
                            />
                          ) : null;
                        })()}
                        {(!collection.cover && !collection.banner && !collection.metadataBanner && !(collection.nfts && collection.nfts.length > 0)) ? null : null}
                        {(!collection.cover && !collection.banner && !collection.metadataBanner) && (collection.nfts && collection.nfts.length > 0) ? (
                         // üñºÔ∏è –ï—Å–ª–∏ –Ω–µ—Ç –æ–±–ª–æ–∂–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ NFT
                         <LazyImage
                           src={collection.nfts[0].image}
                           alt={`${collection.name} NFT`}
                           className="w-full h-full object-cover"
                           priority={index < 2}
                           sizes="40px"
                           onError={(e) => {
                             console.warn('‚ö†Ô∏è Collection NFT image failed to load:', e.target.src);
                             e.target.style.display = 'none';
                             e.target.nextSibling.style.display = 'flex';
                           }}
                         />
                        ) : null}
                       <div className="w-full h-full flex items-center justify-center" style={{ display: (collection.cover || collection.banner || collection.metadataBanner || (collection.nfts && collection.nfts.length > 0)) ? 'none' : 'flex' }}>
                         <Image className="w-5 h-5 text-zinc-400" />
                       </div>
                     </div>
                     <div className="flex-1 min-w-0">
                       <h4 className="text-sm font-medium text-white truncate">
                         {collection.name}
                       </h4>
                       <p className="text-xs text-zinc-400 truncate">
                         {collection.description || 'No description'}
                       </p>
                     </div>
                     <ArrowRight className="w-4 h-4 text-zinc-400" />
                   </div>
                 );
               })}
               </div>
            </div>
          )}

          {/* NFTs Section */}
          {searchResults.nfts.length > 0 && (
            <div>
              <div className="flex items-center justify-between mb-3">
                <h3 className="text-sm font-semibold text-zinc-300 flex items-center gap-2">
                  <Image className="w-4 h-4" />
                  My NFTs ({searchResults.nfts.length})
                </h3>
                <button
                  onClick={handleViewAllNFTs}
                  className="text-xs text-blue-400 hover:text-blue-300 transition-colors"
                >
                  View all
                </button>
              </div>
              <div className="space-y-2">
                {displayedNFTs.map((nft, index) => {
                  // Debug: –ª–æ–≥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É NFT –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è
                  if (index === 0) {
                    console.log('üîç First NFT in search results:', {
                      id: nft.id,
                      directImage: nft.image,
                      metadataImage: nft.metadata?.image,
                      contractAddress: nft.contractAddress || nft.token?.address,
                      isFactoryNFT: nft.isFactoryNFT,
                      collectionName: nft.collectionName,
                      fullNft: nft
                    });
                  }
                  
                  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                  let imageUrl = getNFTImageUrl(nft);
                  
                  // –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è NFT, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback (–æ–±–ª–æ–∂–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ NFT –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏)
                  if (!imageUrl) {
                    imageUrl = getFallbackImage(nft);
                    console.log('üîÑ Using fallback image for NFT:', nft.metadata?.name || nft.id);
                  }
                  
                  // üéØ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ï—Å–ª–∏ NFT –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
                  if (!imageUrl && nft.collectionName) {
                    const collection = window.allCollections?.find(col => 
                      col.name === nft.collectionName ||
                      col.name?.toLowerCase().includes(nft.collectionName?.toLowerCase()) ||
                      nft.collectionName?.toLowerCase().includes(col.name?.toLowerCase())
                    );
                    
                    if (collection && collection.nfts && collection.nfts.length > 0) {
                      const firstNFT = collection.nfts[0];
                      const nftImage = firstNFT.image || firstNFT.image_url || firstNFT.media_url;
                      
                      if (nftImage) {
                        if (nftImage.startsWith('ipfs://')) {
                          // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º IPFS URL
                          const cid = nftImage.replace('ipfs://', '');
                          imageUrl = `https://gateway.lighthouse.storage/ipfs/${cid}`;
                        } else {
                          imageUrl = nftImage;
                        }
                        console.log('üñºÔ∏è Using collection NFT image as fallback:', collection.name, imageUrl);
                      }
                    }
                  }
                  
                  return (
                    <div
                      key={`nft-${nft.token?.address}-${nft.id}-${index}`}
                      onClick={() => handleNFTClick(nft)}
                      className="flex items-center gap-3 p-2 rounded-lg hover:bg-zinc-800/50 cursor-pointer transition-colors"
                    >
                      <div className="w-10 h-10 rounded-lg bg-zinc-800 flex items-center justify-center flex-shrink-0 overflow-hidden">
                        {imageUrl ? (
                          <LazyImage
                            src={imageUrl}
                            alt={nft.metadata?.name || `NFT #${nft.id}`}
                            className="w-full h-full object-cover"
                            priority={index < 2} // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –ø–µ—Ä–≤—ã—Ö 2 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                            sizes="40px"
                            onError={(e) => {
                              console.warn('‚ö†Ô∏è NFT image failed to load:', e.target.src);
                              console.log('üîç NFT data for debugging:', {
                                nft: nft.id,
                                directImage: nft.image,
                                metadataImage: nft.metadata?.image,
                                resolvedUrl: imageUrl
                              });
                              
                              // –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å fallback –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                              const fallbackUrl = getFallbackImage(nft);
                              if (fallbackUrl && fallbackUrl !== imageUrl) {
                                console.log('üîÑ Retrying with fallback image:', fallbackUrl);
                                e.target.src = fallbackUrl;
                              } else {
                                // –ï—Å–ª–∏ –Ω–µ—Ç fallback, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º placeholder
                                e.target.style.display = 'none';
                                e.target.nextSibling.style.display = 'flex';
                              }
                            }}
                          />
                        ) : null}
                        <div className="w-full h-full flex items-center justify-center" style={{ display: imageUrl ? 'none' : 'flex' }}>
                          <img src={logo} alt="Logo" className="w-5 h-5 opacity-50" />
                        </div>
                      </div>
                      <div className="flex-1 min-w-0">
                        <h4 className="text-sm font-medium text-white truncate">
                          {nft.metadata?.name || `NFT #${nft.id}`}
                        </h4>
                        <p className="text-xs text-zinc-400 truncate">
                          {nft.collectionName}
                        </p>
                      </div>
                      <ArrowRight className="w-4 h-4 text-zinc-400" />
                    </div>
                  );
                })}
              </div>
            </div>
          )}

          {/* Footer */}
          <div className="mt-4 pt-3 border-t border-zinc-700/30">
            <p className="text-xs text-zinc-500 text-center">
              Found {totalResults} result{totalResults !== 1 ? 's' : ''} for "{searchTerm}"
            </p>
          </div>
        </div>
      )}
    </div>
  );
};

export default SearchResults;

// –£–º–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ IPFS URLs —Å –≤—ã–±–æ—Ä–æ–º gateway
const convertIPFSUrl = (url, isLighthouseCollection = false) => {
  if (url && url.startsWith('ipfs://')) {
    const cid = url.replace('ipfs://', '');
    
    if (isLighthouseCollection) {
      // –î–ª—è –Ω–∞—à–∏—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º Lighthouse
      return `https://gateway.lighthouse.storage/ipfs/${cid}`;
    } else {
      // –î–ª—è –≤–Ω–µ—à–Ω–∏—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º Cloudflare
      return `https://cloudflare-ipfs.com/ipfs/${cid}`;
    }
  }
  return url;
};