// safeOptimizer.js - –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å fallback
import { features, featureFlags, checkFeatureSupport } from './featureDetection.js';

export class SafeOptimizer {
  constructor() {
    this.initialized = false;
    this.optimizers = {};
    this.initializeOptimizations();
  }

  async initializeOptimizations() {
    try {
      console.log('üöÄ Initializing SafeOptimizer with advanced features...');
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
      if (checkFeatureSupport('wasm')) {
        this.optimizers.wasm = await this.createWasmProcessor();
        console.log('‚úÖ WASM processor initialized');
      }
      
      if (checkFeatureSupport('serviceWorker')) {
        this.optimizers.serviceWorker = await this.createServiceWorkerCache();
        console.log('‚úÖ Service Worker cache initialized');
      }
      
      if (checkFeatureSupport('sharedArrayBuffer')) {
        this.optimizers.sharedBuffer = await this.createSharedBufferWorker();
        console.log('‚úÖ Shared Buffer Worker initialized');
      }
      
      if (checkFeatureSupport('compression')) {
        this.optimizers.compression = true;
        console.log('‚úÖ Compression API available');
      }
      
      this.initialized = true;
      console.log('‚úÖ SafeOptimizer initialized with optimizations:', Object.keys(this.optimizers));
    } catch (error) {
      console.warn('‚ö†Ô∏è SafeOptimizer initialization failed, using fallbacks:', error);
      this.initialized = true; // –í—Å–µ —Ä–∞–≤–Ω–æ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
    }
  }

  async createWasmProcessor() {
    try {
      // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –¥–ª—è WASM
      const { WasmImageProcessor } = await import('./wasmImageProcessor.js');
      return new WasmImageProcessor();
    } catch (error) {
      console.warn('‚ö†Ô∏è WASM processor creation failed:', error);
      return null;
    }
  }

  async createServiceWorkerCache() {
    try {
      const { ServiceWorkerCache } = await import('./serviceWorkerCache.js');
      return new ServiceWorkerCache();
    } catch (error) {
      console.warn('‚ö†Ô∏è Service Worker cache creation failed:', error);
      return null;
    }
  }

  async createSharedBufferWorker() {
    try {
      const { SharedBufferWorker } = await import('./sharedBufferWorker.js');
      return new SharedBufferWorker();
    } catch (error) {
      console.warn('‚ö†Ô∏è Shared Buffer Worker creation failed:', error);
      return null;
    }
  }

  // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  async optimizeImage(file, quality = 0.8) {
    if (this.optimizers.wasm) {
      try {
        const result = await this.optimizers.wasm.optimize(file, quality);
        console.log('‚úÖ WASM optimization successful');
        return result;
      } catch (error) {
        console.warn('‚ö†Ô∏è WASM optimization failed, using Canvas fallback:', error);
      }
    }
    
    // Fallback –Ω–∞ Canvas API
    return await this.canvasOptimize(file, quality);
  }

  // Canvas –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–∞–∫ fallback
  async canvasOptimize(file, quality) {
    return new Promise((resolve) => {
      const canvas = document.createElement('canvas');
      const ctx = canvas.getContext('2d');
      const img = new Image();
      
      img.onload = () => {
        const maxWidth = 1200;
        const maxHeight = 900;
        
        let { width, height } = img;
        
        if (width > maxWidth || height > maxHeight) {
          const ratio = Math.min(maxWidth / width, maxHeight / height);
          width *= ratio;
          height *= ratio;
        }
        
        canvas.width = width;
        canvas.height = height;
        
        // –†–∏—Å—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ–º
        ctx.imageSmoothingEnabled = true;
        ctx.imageSmoothingQuality = 'high';
        ctx.drawImage(img, 0, 0, width, height);
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ blob —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º
        canvas.toBlob((blob) => {
          const optimizedFile = new File([blob], file.name, {
            type: file.type,
            lastModified: Date.now()
          });
          
          console.log(`üì± Canvas optimization: ${file.size} -> ${optimizedFile.size} bytes (${Math.round((1 - optimizedFile.size / file.size) * 100)}% reduction)`);
          resolve(optimizedFile);
        }, file.type, quality);
      };
      
      img.onerror = () => {
        console.warn('‚ö†Ô∏è Image loading failed, returning original file');
        resolve(file);
      };
      
      img.src = URL.createObjectURL(file);
    });
  }

  // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
  async uploadFiles(files, endpoint, options = {}) {
    const results = [];
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Shared Buffer Worker –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
    if (this.optimizers.sharedBuffer) {
      try {
        console.log('üöÄ Using Shared Buffer Worker for file processing...');
        const processedFiles = await this.optimizers.sharedBuffer.processFiles(files);
        
        for (let i = 0; i < files.length; i++) {
          const file = files[i];
          const processed = processedFiles[i];
          
          if (processed && processed.processed) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º Service Worker –∫—ç—à –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            if (this.optimizers.serviceWorker) {
              await this.optimizers.serviceWorker.cacheUpload(file, processed);
            }
            
            results.push(processed);
          } else {
            // Fallback –Ω–∞ –æ–±—ã—á–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É
            const result = await this.regularUpload(file, endpoint, options);
            results.push(result);
          }
        }
      } catch (error) {
        console.warn('‚ö†Ô∏è Shared Buffer processing failed, using regular upload:', error);
        for (const file of files) {
          const result = await this.regularUpload(file, endpoint, options);
          results.push(result);
        }
      }
    } else {
      // –û–±—ã—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
      for (const file of files) {
        const result = await this.regularUpload(file, endpoint, options);
        results.push(result);
      }
    }
    
    return results;
  }

  // –û–±—ã—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
  async regularUpload(file, endpoint, options = {}) {
    const formData = new FormData();
    formData.append('file', file);
    
    if (options.metadata) {
      formData.append('metadata', JSON.stringify(options.metadata));
    }
    
    const response = await fetch(endpoint, {
      method: 'POST',
      body: formData
    });
    
    if (!response.ok) {
      throw new Error(`Upload failed: ${response.status}`);
    }
    
    const result = await response.json();
    
    // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –µ—Å–ª–∏ Service Worker –¥–æ—Å—Ç—É–ø–µ–Ω
    if (this.optimizers.serviceWorker) {
      await this.optimizers.serviceWorker.cacheUpload(file, result);
    }
    
    return result;
  }

  // –°–∂–∞—Ç–∏–µ –¥–∞–Ω–Ω—ã—Ö
  async compressData(data) {
    if (this.optimizers.compression && this.optimizers.sharedBuffer) {
      try {
        return await this.optimizers.sharedBuffer.compressData(data);
      } catch (error) {
        console.warn('‚ö†Ô∏è Shared Buffer compression failed, using fallback:', error);
      }
    }
    
    // Fallback —Å–∂–∞—Ç–∏–µ
    return await this.fallbackCompression(data);
  }

  // Fallback —Å–∂–∞—Ç–∏–µ
  async fallbackCompression(data) {
    try {
      const cs = new CompressionStream('gzip');
      const writer = cs.writable.getWriter();
      const reader = cs.readable.getReader();
      
      const uint8Array = new Uint8Array(data);
      writer.write(uint8Array);
      writer.close();
      
      const chunks = [];
      while (true) {
        const { done, value } = await reader.read();
        if (done) break;
        chunks.push(value);
      }
      
      const compressed = new Uint8Array(chunks.reduce((acc, chunk) => acc + chunk.length, 0));
      let offset = 0;
      for (const chunk of chunks) {
        compressed.set(chunk, offset);
        offset += chunk.length;
      }
      
      return compressed.buffer;
    } catch (error) {
      console.warn('‚ö†Ô∏è Fallback compression failed:', error);
      return data; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    }
  }

  // –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  async decompressData(compressedData) {
    if (this.optimizers.compression && this.optimizers.sharedBuffer) {
      try {
        return await this.optimizers.sharedBuffer.decompressData(compressedData);
      } catch (error) {
        console.warn('‚ö†Ô∏è Shared Buffer decompression failed, using fallback:', error);
      }
    }
    
    // Fallback —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞
    return await this.fallbackDecompression(compressedData);
  }

  // Fallback —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞
  async fallbackDecompression(compressedData) {
    try {
      const ds = new DecompressionStream('gzip');
      const writer = ds.writable.getWriter();
      const reader = ds.readable.getReader();
      
      const uint8Array = new Uint8Array(compressedData);
      writer.write(uint8Array);
      writer.close();
      
      const chunks = [];
      while (true) {
        const { done, value } = await reader.read();
        if (done) break;
        chunks.push(value);
      }
      
      const decompressed = new Uint8Array(chunks.reduce((acc, chunk) => acc + chunk.length, 0));
      let offset = 0;
      for (const chunk of chunks) {
        decompressed.set(chunk, offset);
        offset += chunk.length;
      }
      
      return decompressed.buffer;
    } catch (error) {
      console.warn('‚ö†Ô∏è Fallback decompression failed:', error);
      return compressedData; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∂–∞—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π
  getOptimizationStats() {
    const stats = {
      initialized: this.initialized,
      availableOptimizers: Object.keys(this.optimizers),
      features: features,
      featureFlags: featureFlags
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç –∫–∞–∂–¥–æ–≥–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞
    if (this.optimizers.serviceWorker) {
      stats.serviceWorker = this.optimizers.serviceWorker.getCacheStats();
    }
    
    if (this.optimizers.sharedBuffer) {
      stats.sharedBuffer = 'available';
    }
    
    if (this.optimizers.wasm) {
      stats.wasm = 'available';
    }
    
    if (this.optimizers.compression) {
      stats.compression = 'available';
    }
    
    return stats;
  }

  // –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
  destroy() {
    if (this.optimizers.sharedBuffer) {
      this.optimizers.sharedBuffer.destroy();
    }
    
    if (this.optimizers.serviceWorker) {
      this.optimizers.serviceWorker.clearCache();
    }
    
    this.optimizers = {};
    this.initialized = false;
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞
export const safeOptimizer = new SafeOptimizer(); 