// wasmImageProcessor.js - WASM –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
export class WasmImageProcessor {
  constructor() {
    this.wasmModule = null;
    this.wasmLoaded = false;
    this.canvasProcessor = null;
    this.initCanvasProcessor();
  }

  async initCanvasProcessor() {
    // –°–æ–∑–¥–∞–µ–º Canvas –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∫–∞–∫ fallback
    this.canvasProcessor = new CanvasImageProcessor();
    console.log('‚úÖ Canvas image processor initialized as fallback');
  }

  async loadWasm() {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ WASM —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
      const wasmPath = '/wasm/image-processor.wasm';
      const response = await fetch(wasmPath, { method: 'HEAD' });
      
      if (response.ok) {
        this.wasmModule = await WebAssembly.instantiateStreaming(
          fetch(wasmPath)
        );
        this.wasmLoaded = true;
        console.log('‚úÖ WASM image processor loaded successfully');
      } else {
        console.warn('‚ö†Ô∏è WASM file not found, using Canvas fallback');
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è WASM loading failed, using Canvas fallback:', error);
    }
  }

  async optimize(file, quality = 0.8) {
    if (this.wasmLoaded && this.wasmModule) {
      try {
        return await this.wasmOptimize(file, quality);
      } catch (error) {
        console.warn('‚ö†Ô∏è WASM optimization failed, falling back to Canvas');
      }
    }
    
    // Fallback –Ω–∞ Canvas –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
    return await this.canvasOptimize(file, quality);
  }

  async wasmOptimize(file, quality) {
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç WASM –ª–æ–≥–∏–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º Canvas –∫–∞–∫ fallback
    return await this.canvasOptimize(file, quality);
  }

  async canvasOptimize(file, quality) {
    return new Promise((resolve) => {
      const canvas = document.createElement('canvas');
      const ctx = canvas.getContext('2d');
      const img = new Image();
      
      img.onload = () => {
        const maxWidth = 1200;
        const maxHeight = 900;
        
        let { width, height } = img;
        
        if (width > maxWidth || height > maxHeight) {
          const ratio = Math.min(maxWidth / width, maxHeight / height);
          width *= ratio;
          height *= ratio;
        }
        
        canvas.width = width;
        canvas.height = height;
        
        // –†–∏—Å—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ–º
        ctx.imageSmoothingEnabled = true;
        ctx.imageSmoothingQuality = 'high';
        ctx.drawImage(img, 0, 0, width, height);
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ blob —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º
        canvas.toBlob((blob) => {
          const optimizedFile = new File([blob], file.name, {
            type: file.type,
            lastModified: Date.now()
          });
          
          console.log(`üì± Canvas optimization: ${file.size} -> ${optimizedFile.size} bytes`);
          resolve(optimizedFile);
        }, file.type, quality);
      };
      
      img.onerror = () => {
        console.warn('‚ö†Ô∏è Image loading failed, returning original file');
        resolve(file);
      };
      
      img.src = URL.createObjectURL(file);
    });
  }

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
  async resizeImage(file, maxWidth, maxHeight) {
    return await this.canvasOptimize(file, 1.0, { maxWidth, maxHeight });
  }

  async compressImage(file, quality) {
    return await this.canvasOptimize(file, quality);
  }

  async convertFormat(file, format) {
    return await this.canvasOptimize(file, 0.9, { format });
  }
}

// Canvas –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∫–∞–∫ fallback
class CanvasImageProcessor {
  constructor() {
    this.supportedFormats = ['image/jpeg', 'image/png', 'image/webp'];
  }

  async optimize(file, quality = 0.8, options = {}) {
    const { maxWidth, maxHeight, format } = options;
    
    return new Promise((resolve) => {
      const canvas = document.createElement('canvas');
      const ctx = canvas.getContext('2d');
      const img = new Image();
      
      img.onload = () => {
        let { width, height } = img;
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
        if (maxWidth && width > maxWidth) {
          const ratio = maxWidth / width;
          width = maxWidth;
          height *= ratio;
        }
        
        if (maxHeight && height > maxHeight) {
          const ratio = maxHeight / height;
          height = maxHeight;
          width *= ratio;
        }
        
        canvas.width = width;
        canvas.height = height;
        
        // –†–∏—Å—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        ctx.imageSmoothingEnabled = true;
        ctx.imageSmoothingQuality = 'high';
        ctx.drawImage(img, 0, 0, width, height);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç
        const outputFormat = format || file.type;
        const mimeType = this.supportedFormats.includes(outputFormat) ? outputFormat : 'image/jpeg';
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ blob
        canvas.toBlob((blob) => {
          const optimizedFile = new File([blob], file.name, {
            type: mimeType,
            lastModified: Date.now()
          });
          
          console.log(`üì± Canvas optimization: ${file.size} -> ${optimizedFile.size} bytes (${Math.round((1 - optimizedFile.size / file.size) * 100)}% reduction)`);
          resolve(optimizedFile);
        }, mimeType, quality);
      };
      
      img.onerror = () => {
        console.warn('‚ö†Ô∏è Image loading failed, returning original file');
        resolve(file);
      };
      
      img.src = URL.createObjectURL(file);
    });
  }
} 